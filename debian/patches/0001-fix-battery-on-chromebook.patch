From fca752849b8d3f2f992bf25f7488aa2e36c7d2a6 Mon Sep 17 00:00:00 2001
From: o9000 <mrovi9000@gmail.com>
Date: Wed, 28 Dec 2016 19:13:54 +0100
Subject: [PATCH] Battery: fix issue #616

---
 src/battery/battery.c                                                                        |   2 ++
 src/battery/battery.h                                                                        |   2 ++
 src/battery/linux.c                                                                          | 245 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++----------------------------------------------------------------------------------------------------------------------------
 src/tint.c                                                                                   |  15 ++++++++++++++-

Index: tint2/src/battery/battery.c
===================================================================
--- tint2.orig/src/battery/battery.c
+++ tint2/src/battery/battery.c
@@ -56,6 +56,8 @@ char *battery_uwheel_command;
 char *battery_dwheel_command;
 gboolean battery_found;
 
+char *battery_sys_prefix = (char*)"";
+
 void battery_init_fonts();
 char *battery_get_tooltip(void *obj);
 void battery_dump_geometry(void *obj, int indent);
Index: tint2/src/battery/battery.h
===================================================================
--- tint2.orig/src/battery/battery.h
+++ tint2/src/battery/battery.h
@@ -64,6 +64,8 @@ extern char *battery_rclick_command;
 extern char *battery_uwheel_command;
 extern char *battery_dwheel_command;
 
+extern char *battery_sys_prefix;
+
 static inline gchar *chargestate2str(ChargeState state)
 {
 	switch (state) {
Index: tint2/src/battery/linux.c
===================================================================
--- tint2.orig/src/battery/linux.c
+++ tint2/src/battery/linux.c
@@ -38,18 +38,16 @@ struct psy_battery {
 	gint64 timestamp;
 	/* sysfs files */
 	gchar *path_present;
-	gchar *path_energy_now;
-	gchar *path_energy_full;
-	gchar *path_power_now;
+	gchar *path_level_now;
+	gchar *path_level_full;
+	gchar *path_rate_now;
 	gchar *path_status;
-	/* sysfs hints */
-	gboolean energy_in_uamp;
-	gboolean power_in_uamp;
 	/* values */
 	gboolean present;
-	gint energy_now;
-	gint energy_full;
-	gint power_now;
+	gint level_now;
+	gint level_full;
+	gint rate_now;
+	gchar unit;
 	ChargeState status;
 };
 
@@ -76,22 +74,23 @@ static void uevent_battery_plug()
 static struct uevent_notify psy_plug = {UEVENT_ADD | UEVENT_REMOVE, "power_supply", NULL, uevent_battery_plug};
 
 #define RETURN_ON_ERROR(err) \
-	if (error) {             \
+	if (err) {             \
 		g_error_free(err);   \
+		fprintf(stderr, RED "%s:%d: errror" RESET "\n", __FILE__, __LINE__); \
 		return FALSE;        \
 	}
 
 static GList *batteries = NULL;
 static GList *mains = NULL;
 
-static guint8 energy_to_percent(gint energy_now, gint energy_full)
+static guint8 level_to_percent(gint level_now, gint level_full)
 {
-	return 0.5 + ((energy_now <= energy_full ? energy_now : energy_full) * 100.0) / energy_full;
+	return 0.5 + ((level_now <= level_full ? level_now : level_full) * 100.0) / level_full;
 }
 
 static enum psy_type power_supply_get_type(const gchar *entryname)
 {
-	gchar *path_type = g_build_filename("/sys/class/power_supply", entryname, "type", NULL);
+	gchar *path_type = g_build_filename(battery_sys_prefix, "/sys/class/power_supply", entryname, "type", NULL);
 	GError *error = NULL;
 	gchar *type;
 	gsize typelen;
@@ -99,6 +98,7 @@ static enum psy_type power_supply_get_ty
 	g_file_get_contents(path_type, &type, &typelen, &error);
 	g_free(path_type);
 	if (error) {
+		fprintf(stderr, RED "%s:%d: read failed" RESET "\n", __FILE__, __LINE__);
 		g_error_free(error);
 		return PSY_UNKNOWN;
 	}
@@ -122,59 +122,53 @@ static gboolean init_linux_battery(struc
 {
 	const gchar *entryname = bat->name;
 
-	bat->energy_in_uamp = FALSE;
-	bat->power_in_uamp = FALSE;
-
-	bat->path_present = g_build_filename("/sys/class/power_supply", entryname, "present", NULL);
+	bat->path_present = g_build_filename(battery_sys_prefix, "/sys/class/power_supply", entryname, "present", NULL);
 	if (!g_file_test(bat->path_present, G_FILE_TEST_EXISTS)) {
+		fprintf(stderr, RED "%s:%d: read failed" RESET "\n", __FILE__, __LINE__);
 		goto err0;
 	}
 
-	bat->path_energy_now = g_build_filename("/sys/class/power_supply", entryname, "energy_now", NULL);
-	if (!g_file_test(bat->path_energy_now, G_FILE_TEST_EXISTS)) {
-		g_free(bat->path_energy_now);
-		bat->path_energy_now = g_build_filename("/sys/class/power_supply", entryname, "charge_now", NULL);
-		bat->energy_in_uamp = TRUE;
-	}
-	if (!g_file_test(bat->path_energy_now, G_FILE_TEST_EXISTS)) {
+	bat->path_level_now = g_build_filename(battery_sys_prefix, "/sys/class/power_supply", entryname, "energy_now", NULL);
+	bat->path_level_full =
+		g_build_filename(battery_sys_prefix, "/sys/class/power_supply", entryname, "energy_full", NULL);
+	bat->path_rate_now = g_build_filename(battery_sys_prefix, "/sys/class/power_supply", entryname, "power_now", NULL);
+	bat->unit = 'W';
+
+	if (!g_file_test(bat->path_level_now, G_FILE_TEST_EXISTS) ||
+	    !g_file_test(bat->path_level_full, G_FILE_TEST_EXISTS) ||
+	    !g_file_test(bat->path_rate_now, G_FILE_TEST_EXISTS)) {
+		g_free(bat->path_level_now);
+		g_free(bat->path_level_full);
+		g_free(bat->path_rate_now);
+		bat->path_level_now =
+			g_build_filename(battery_sys_prefix, "/sys/class/power_supply", entryname, "charge_now", NULL);
+		bat->path_level_full =
+			g_build_filename(battery_sys_prefix, "/sys/class/power_supply", entryname, "charge_full", NULL);
+		bat->path_rate_now =
+			g_build_filename(battery_sys_prefix, "/sys/class/power_supply", entryname, "current_now", NULL);
+		bat->unit = 'A';
+	}
+	if (!g_file_test(bat->path_level_now, G_FILE_TEST_EXISTS) ||
+	    !g_file_test(bat->path_level_full, G_FILE_TEST_EXISTS) ||
+	    !g_file_test(bat->path_rate_now, G_FILE_TEST_EXISTS)) {
+		fprintf(stderr, RED "%s:%d: read failed" RESET "\n", __FILE__, __LINE__);
 		goto err1;
 	}
 
-	if (!bat->energy_in_uamp) {
-		bat->path_energy_full = g_build_filename("/sys/class/power_supply", entryname, "energy_full", NULL);
-		if (!g_file_test(bat->path_energy_full, G_FILE_TEST_EXISTS))
-			goto err2;
-	} else {
-		bat->path_energy_full = g_build_filename("/sys/class/power_supply", entryname, "charge_full", NULL);
-		if (!g_file_test(bat->path_energy_full, G_FILE_TEST_EXISTS))
-			goto err2;
-	}
-
-	bat->path_power_now = g_build_filename("/sys/class/power_supply", entryname, "power_now", NULL);
-	if (!g_file_test(bat->path_power_now, G_FILE_TEST_EXISTS)) {
-		g_free(bat->path_power_now);
-		bat->path_power_now = g_build_filename("/sys/class/power_supply", entryname, "current_now", NULL);
-		bat->power_in_uamp = TRUE;
-	}
-	if (!g_file_test(bat->path_power_now, G_FILE_TEST_EXISTS)) {
-		goto err3;
-	}
-
-	bat->path_status = g_build_filename("/sys/class/power_supply", entryname, "status", NULL);
+	bat->path_status = g_build_filename(battery_sys_prefix, "/sys/class/power_supply", entryname, "status", NULL);
 	if (!g_file_test(bat->path_status, G_FILE_TEST_EXISTS)) {
-		goto err4;
+		fprintf(stderr, RED "%s:%d: read failed" RESET "\n", __FILE__, __LINE__);
+		goto err2;
 	}
 
 	return TRUE;
 
-err4:
-	g_free(bat->path_status);
-err3:
-	g_free(bat->path_power_now);
 err2:
-	g_free(bat->path_energy_full);
+	g_free(bat->path_status);
 err1:
-	g_free(bat->path_energy_now);
+	g_free(bat->path_level_now);
+	g_free(bat->path_level_full);
+	g_free(bat->path_rate_now);
 err0:
 	g_free(bat->path_present);
 
@@ -185,8 +179,9 @@ static gboolean init_linux_mains(struct
 {
 	const gchar *entryname = ac->name;
 
-	ac->path_online = g_build_filename("/sys/class/power_supply", entryname, "online", NULL);
+	ac->path_online = g_build_filename(battery_sys_prefix, "/sys/class/power_supply", entryname, "online", NULL);
 	if (!g_file_test(ac->path_online, G_FILE_TEST_EXISTS)) {
+		fprintf(stderr, RED "%s:%d: read failed" RESET "\n", __FILE__, __LINE__);
 		g_free(ac->path_online);
 		return FALSE;
 	}
@@ -199,9 +194,9 @@ static void psy_battery_free(gpointer da
 	struct psy_battery *bat = data;
 	g_free(bat->name);
 	g_free(bat->path_status);
-	g_free(bat->path_power_now);
-	g_free(bat->path_energy_full);
-	g_free(bat->path_energy_now);
+	g_free(bat->path_rate_now);
+	g_free(bat->path_level_full);
+	g_free(bat->path_level_now);
 	g_free(bat->path_present);
 	g_free(bat);
 }
@@ -232,10 +227,10 @@ static void add_battery(const char *entr
 
 	if (init_linux_battery(bat)) {
 		batteries = g_list_append(batteries, bat);
-		fprintf(stdout, "found battery \"%s\"\n", bat->name);
+		fprintf(stdout, GREEN "Found battery \"%s\"" RESET "\n", bat->name);
 	} else {
 		g_free(bat);
-		fprintf(stderr, RED "failed to initialize battery \"%s\"" RESET "\n", entryname);
+		fprintf(stderr, RED "Failed to initialize battery \"%s\"" RESET "\n", entryname);
 	}
 }
 
@@ -246,10 +241,10 @@ static void add_mains(const char *entryn
 
 	if (init_linux_mains(ac)) {
 		mains = g_list_append(mains, ac);
-		fprintf(stdout, "found mains \"%s\"\n", ac->name);
+		fprintf(stdout, GREEN "Found mains \"%s\"" RESET "\n", ac->name);
 	} else {
 		g_free(ac);
-		fprintf(stderr, RED "failed to initialize mains \"%s\"" RESET "\n", entryname);
+		fprintf(stderr, RED "Failed to initialize mains \"%s\"" RESET "\n", entryname);
 	}
 }
 
@@ -261,10 +256,13 @@ gboolean battery_os_init()
 
 	battery_os_free();
 
-	directory = g_dir_open("/sys/class/power_supply", 0, &error);
+	gchar *dir_path = g_build_filename(battery_sys_prefix, "/sys/class/power_supply", NULL);
+	directory = g_dir_open(dir_path, 0, &error);
+	g_free(dir_path);
 	RETURN_ON_ERROR(error);
 
 	while ((entryname = g_dir_read_name(directory))) {
+		fprintf(stderr, GREEN "Found power device %s" RESET "\n", entryname);
 		enum psy_type type = power_supply_get_type(entryname);
 
 		switch (type) {
@@ -287,15 +285,15 @@ gboolean battery_os_init()
 	return batteries != NULL;
 }
 
-static gint estimate_power_usage(struct psy_battery *bat, gint old_energy_now, gint64 old_timestamp)
+static gint estimate_rate_usage(struct psy_battery *bat, gint old_level_now, gint64 old_timestamp)
 {
-	gint64 diff_power = ABS(bat->energy_now - old_energy_now);
+	gint64 diff_level = ABS(bat->level_now - old_level_now);
 	gint64 diff_time = bat->timestamp - old_timestamp;
 
 	/* µW = (µWh * 3600) / (µs / 1000000) */
-	gint power = diff_power * 3600 * 1000000 / MAX(1, diff_time);
+	gint rate = diff_level * 3600 * 1000000 / MAX(1, diff_time);
 
-	return power;
+	return rate;
 }
 
 static gboolean update_linux_battery(struct psy_battery *bat)
@@ -305,15 +303,15 @@ static gboolean update_linux_battery(str
 	gsize datalen;
 
 	gint64 old_timestamp = bat->timestamp;
-	int old_energy_now = bat->energy_now;
-	gint old_power_now = bat->power_now;
+	int old_level_now = bat->level_now;
+	gint old_rate_now = bat->rate_now;
 
 	/* reset values */
 	bat->present = 0;
 	bat->status = BATTERY_UNKNOWN;
-	bat->energy_now = 0;
-	bat->energy_full = 0;
-	bat->power_now = 0;
+	bat->level_now = 0;
+	bat->level_full = 0;
+	bat->rate_now = 0;
 	bat->timestamp = g_get_monotonic_time();
 
 	/* present */
@@ -339,35 +337,35 @@ static gboolean update_linux_battery(str
 	}
 	g_free(data);
 
-	/* energy now */
-	g_file_get_contents(bat->path_energy_now, &data, &datalen, &error);
+	/* level now */
+	g_file_get_contents(bat->path_level_now, &data, &datalen, &error);
 	RETURN_ON_ERROR(error);
-	bat->energy_now = atoi(data);
+	bat->level_now = atoi(data);
 	g_free(data);
 
-	/* energy full */
-	g_file_get_contents(bat->path_energy_full, &data, &datalen, &error);
+	/* level full */
+	g_file_get_contents(bat->path_level_full, &data, &datalen, &error);
 	RETURN_ON_ERROR(error);
-	bat->energy_full = atoi(data);
+	bat->level_full = atoi(data);
 	g_free(data);
 
-	/* power now */
-	g_file_get_contents(bat->path_power_now, &data, &datalen, &error);
+	/* rate now */
+	g_file_get_contents(bat->path_rate_now, &data, &datalen, &error);
 	if (g_error_matches(error, G_FILE_ERROR, G_FILE_ERROR_NODEV)) {
-		/* some hardware does not support reading current power consumption */
+		/* some hardware does not support reading current rate consumption */
 		g_error_free(error);
-		bat->power_now = estimate_power_usage(bat, old_energy_now, old_timestamp);
-		if (bat->power_now == 0 && bat->status != BATTERY_FULL) {
+		bat->rate_now = estimate_rate_usage(bat, old_level_now, old_timestamp);
+		if (bat->rate_now == 0 && bat->status != BATTERY_FULL) {
 			/* If the hardware updates the level slower than our sampling period,
 			 * we need to sample more rarely */
-			bat->power_now = old_power_now;
+			bat->rate_now = old_rate_now;
 			bat->timestamp = old_timestamp;
 		}
 	} else if (error) {
 		g_error_free(error);
 		return FALSE;
 	} else {
-		bat->power_now = atoi(data);
+		bat->rate_now = atoi(data);
 		g_free(data);
 	}
 
@@ -394,9 +392,9 @@ int battery_os_update(BatteryState *stat
 {
 	GList *l;
 
-	gint64 total_energy_now = 0;
-	gint64 total_energy_full = 0;
-	gint64 total_power_now = 0;
+	gint64 total_level_now = 0;
+	gint64 total_level_full = 0;
+	gint64 total_rate_now = 0;
 	gint seconds = 0;
 
 	gboolean charging = FALSE;
@@ -408,9 +406,9 @@ int battery_os_update(BatteryState *stat
 		struct psy_battery *bat = l->data;
 		update_linux_battery(bat);
 
-		total_energy_now += bat->energy_now;
-		total_energy_full += bat->energy_full;
-		total_power_now += bat->power_now;
+		total_level_now += bat->level_now;
+		total_level_full += bat->level_full;
+		total_rate_now += bat->rate_now;
 
 		charging |= (bat->status == BATTERY_CHARGING);
 		discharging |= (bat->status == BATTERY_DISCHARGING);
@@ -432,17 +430,17 @@ int battery_os_update(BatteryState *stat
 		state->state = BATTERY_FULL;
 
 	/* calculate seconds */
-	if (total_power_now > 0) {
+	if (total_rate_now > 0) {
 		if (state->state == BATTERY_CHARGING)
-			seconds = 3600 * (total_energy_full - total_energy_now) / total_power_now;
+			seconds = 3600 * (total_level_full - total_level_now) / total_rate_now;
 		else if (state->state == BATTERY_DISCHARGING)
-			seconds = 3600 * total_energy_now / total_power_now;
+			seconds = 3600 * total_level_now / total_rate_now;
 		seconds = MAX(0, seconds);
 	}
 	battery_state_set_time(state, seconds);
 
 	/* calculate percentage */
-	state->percentage = energy_to_percent(total_energy_now, total_energy_full);
+	state->percentage = level_to_percent(total_level_now, total_level_full);
 
 	/* AC state */
 	state->ac_connected = ac_connected;
@@ -450,42 +448,41 @@ int battery_os_update(BatteryState *stat
 	return 0;
 }
 
-static gchar *energy_human_readable(struct psy_battery *bat)
+static gchar *level_human_readable(struct psy_battery *bat)
 {
-	gint now = bat->energy_now;
-	gint full = bat->energy_full;
-	gchar unit = bat->energy_in_uamp ? 'A' : 'W';
+	gint now = bat->level_now;
+	gint full = bat->level_full;
 
 	if (full >= 1000000) {
 		return g_strdup_printf("%d.%d / %d.%d %ch",
-							   now / 1000000,
-							   (now % 1000000) / 100000,
-							   full / 1000000,
-							   (full % 1000000) / 100000,
-							   unit);
+		                       now / 1000000,
+		                       (now % 1000000) / 100000,
+		                       full / 1000000,
+		                       (full % 1000000) / 100000,
+							   bat->unit);
 	} else if (full >= 1000) {
 		return g_strdup_printf("%d.%d / %d.%d m%ch",
-							   now / 1000,
-							   (now % 1000) / 100,
-							   full / 1000,
-							   (full % 1000) / 100,
-							   unit);
+		                       now / 1000,
+		                       (now % 1000) / 100,
+		                       full / 1000,
+		                       (full % 1000) / 100,
+							   bat->unit);
 	} else {
-		return g_strdup_printf("%d / %d µ%ch", now, full, unit);
+		return g_strdup_printf("%d / %d µ%ch", now, full, bat->unit);
 	}
 }
 
-static gchar *power_human_readable(struct psy_battery *bat)
+static gchar *rate_human_readable(struct psy_battery *bat)
 {
-	gint power = bat->power_now;
-	gchar unit = bat->power_in_uamp ? 'A' : 'W';
+	gint rate = bat->rate_now;
+	gchar unit = bat->unit;
 
-	if (power >= 1000000) {
-		return g_strdup_printf("%d.%d %c", power / 1000000, (power % 1000000) / 100000, unit);
-	} else if (power >= 1000) {
-		return g_strdup_printf("%d.%d m%c", power / 1000, (power % 1000) / 100, unit);
-	} else if (power > 0) {
-		return g_strdup_printf("%d µ%c", power, unit);
+	if (rate >= 1000000) {
+		return g_strdup_printf("%d.%d %c", rate / 1000000, (rate % 1000000) / 100000, unit);
+	} else if (rate >= 1000) {
+		return g_strdup_printf("%d.%d m%c", rate / 1000, (rate % 1000) / 100, unit);
+	} else if (rate > 0) {
+		return g_strdup_printf("%d µ%c", rate, unit);
 	} else {
 		return g_strdup_printf("0 %c", unit);
 	}
@@ -510,16 +507,16 @@ char *battery_os_tooltip()
 			continue;
 		}
 
-		gchar *power = power_human_readable(bat);
-		gchar *energy = energy_human_readable(bat);
-		gchar *state = (bat->status == BATTERY_UNKNOWN) ? "Level" : chargestate2str(bat->status);
+		gchar *rate = rate_human_readable(bat);
+		gchar *level = level_human_readable(bat);
+		gchar *state = (bat->status == BATTERY_UNKNOWN) ? "energy" : chargestate2str(bat->status);
 
-		guint8 percentage = energy_to_percent(bat->energy_now, bat->energy_full);
+		guint8 percentage = level_to_percent(bat->level_now, bat->level_full);
 
-		g_string_append_printf(tooltip, "\t%s: %s (%u %%)\n\tPower: %s", state, energy, percentage, power);
+		g_string_append_printf(tooltip, "\t%s: %s (%u %%)\n\trate: %s", state, level, percentage, rate);
 
-		g_free(power);
-		g_free(energy);
+		g_free(rate);
+		g_free(level);
 	}
 
 	for (l = mains; l != NULL; l = l->next) {
Index: tint2/src/tint.c
===================================================================
--- tint2.orig/src/tint.c
+++ tint2/src/tint.c
@@ -343,7 +343,20 @@ void init(int argc, char *argv[])
 			}
 		} else if (i + 1 == argc) {
 			config_path = strdup(argv[i]);
-		} else {
+		}
+#ifdef ENABLE_BATTERY
+		  else if (strcmp(argv[i], "--battery-sys-prefix") == 0) {
+			if (i + 1 < argc) {
+				i++;
+				battery_sys_prefix = strdup(argv[i]);
+			} else {
+				error = 1;
+			}
+		}
+#endif
+
+
+		else {
 			error = 1;
 		}
 		if (error) {
